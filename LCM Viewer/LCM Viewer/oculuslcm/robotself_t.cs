/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace oculuslcm
{
    public sealed class robotself_t : LCM.LCM.LCMEncodable
    {
        public int id;
        public string type;
        public string ability;     
        public string queryChannel;
        public int channelCount;
        public string[] channels;
        public bool enabled;

        public robotself_t()
        {
            id              = 0;
            type            = "BAXTER";
            ability         = "ABILITY UNKNOWN";
            queryChannel    = "control_query|" + id;
            channelCount    = 0;
            channels        = new string[channelCount];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xea8a3a46f83c6991L;
 
        static robotself_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("oculuslcm.info_t"))
                return 0L;
 
            classes.Add("oculuslcm.info_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }

        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write((int)this.id);
            outs.WriteStringZ((string)this.type);
            outs.WriteStringZ((string)this.ability);
            outs.WriteStringZ((string)this.queryChannel);
            outs.Write((int)this.channelCount);
            for (int i = 0; i < this.channelCount; i++)
            {
                outs.WriteStringZ((string)this.channels[i]);
            } 
            outs.Write(this.enabled);
        }
 
        public robotself_t(byte[] data) : this(new LCMDataInputStream(data))
        {

        }
 
        public robotself_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static oculuslcm.info_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            oculuslcm.info_t o = new oculuslcm.info_t();
            o._decodeRecursive(ins);
            return o;
        }

        public void _decodeRecursive(LCMDataInputStream ins)
        {
            
            this.id             = ins.ReadInt32();
            this.type           = ins.ReadStringZ();
            this.ability        = ins.ReadStringZ();
            this.queryChannel   = ins.ReadStringZ();
            this.channelCount   = ins.ReadInt32();
            this.channels       = new string[channelCount];
            for (int i = 0; i < this.channelCount; i++)
            {
                channels[i] = ins.ReadStringZ();
            }
            this.enabled        = ins.ReadBoolean();

        }
 
        public oculuslcm.robotself_t Copy()
        {
            oculuslcm.robotself_t outobj = new oculuslcm.robotself_t();

            outobj.id       = this.id;
            outobj.type     = this.type;
            outobj.ability  = this.ability;
            outobj.channels = this.channels;
            outobj.enabled  = this.enabled;
 
            return outobj;
        }
    }
}

